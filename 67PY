from collections import deque
def orangesRotting(grid):
    rows, cols = len(grid), len(grid[0])
    queue = deque()
    fresh_count = 0
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] == 1:
                fresh_count += 1
            elif grid[r][c] == 2:
                queue.append((r, c, 0))  # (row, col, time)
    
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    max_time = 0
    while queue:
        r, c, time = queue.popleft()
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 1:
                grid[nr][nc] = 2
                fresh_count -= 1
                queue.append((nr, nc, time + 1))
                max_time = max(max_time, time + 1)
    return max_time if fresh_count == 0 else -1
grid = [
    [2, 1, 0, 2],
    [1, 0, 1, 1],
    [0, 1, 2, 0]
]
print(orangesRotting(grid))  
